<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="FoodMapper">

	<resultMap type="com.uni.model.dto.FoodDTO"
		id="foodResultMap">

		<!-- property : 자바에서 필드 변수 이름, column : DB의 해당 컬럼명 -->
		<!-- DB에서의 기본키 -->
		<id property="foodId" column="FOOD_ID" />

		<!-- DB에서의 일반컬럼들 -->
		<result property="foodName" column="FOOD_NAME" />  <!-- dto에는 기본생성자, setter 가 생성되어있어야 한다. -->
		<result property="rcpPat" column="RCP_PAT" />
		<result property="infoEng" column="INFO_ENG" />
		<result property="infoNa" column="INFO_NA" />
		<result property="infoCar" column="INFO_CAR" />
		<result property="infoPro" column="INFO_PRO" />
		<result property="infoFat" column="INFO_FAT" />
		<result property="manual01" column="MANUAL01" />
		<result property="manual02" column="MANUAL02" />
		<result property="manual03" column="MANUAL03" />
		<result property="manual04" column="MANUAL04" />
		<result property="manual05" column="MANUAL05" />
		<result property="manual06" column="MANUAL06" />
		<result property="banYN" column="BAN_YN" />

	</resultMap>

	<!-- 한행에 대한 반환타입을 반드시 설정해야함(둘중한가지는 필수로 작성, 둘다 사용은 안됨) resultMap : 위에서 생성한 
		resultMap을 리턴 타입으로 이용하는 경우 resultType : 이미 정의되어 있는 타입을 이용하여 리턴 타입으로 이용하는 
		경우 파라미터가 한 개인 경우 바인딩 되는 이름은 상관 없다. 파라미터 타입도 지정하지 않아도 된다. parameterType : 
		파라미터로 전달되는 값의 타입을 작성(생략해도 상관없음) # 파라미터 타입이 스트링인경우 '' 자동으로 붙여줌 $ 사용자가 넘긴값 
		그대로를 넣어줌 - 컬럼명이 유동적으로 바뀌는경우 사용가능. 하지만 추천하는 코드 스타일은아니다. #{ code2 } 로 바꿔서 해도 
		잘됨. 1개인경우는 이름이 중요한 것이 아니다. -->


	<select id="selectFood" parameterType="string"
		resultMap="foodResultMap">
		SELECT
		A.FOOD_ID ,
		A.FOOD_NAME ,
		A.RCP_PAT ,
		A.INFO_ENG ,
		A.INFO_NA ,
		A.INFO_CAR ,
		A.INFO_PRO ,
		A.INFO_FAT ,
		A.MANUAL01 ,
		A.MANUAL02
		,
		A.MANUAL03 ,
		A.MANUAL04 ,
		A.MANUAL05 ,
		A.MANUAL06 ,
		A.BAN_YN
		FROM
		MASTERFOODTABLE A
		WHERE A.BAN_YN = 'N'
		AND A.FOOD_NAME LIKE '%'||
		#{foodName}||'%'
		ORDER BY A.FOOD_NAME
	</select>
	
	<select id="selectByCode" parameterType="_int"
		resultMap="foodResultMap">
		SELECT
		       A.FOOD_ID ,
		       A.FOOD_NAME ,
		       A.RCP_PAT ,
		       A.INFO_ENG ,
		       A.INFO_NA ,
		       A.INFO_CAR ,
		       A.INFO_PRO ,
		       A.INFO_FAT ,
		       A.MANUAL01 ,
		       A.MANUAL02 ,
		       A.MANUAL03 ,
		       A.MANUAL04 ,
		       A.MANUAL05 ,
		       A.MANUAL06 ,
		       A.BAN_YN
		  FROM MASTERFOODTABLE A
		 WHERE A.FOOD_ID = #{code}
	</select>
	
	<!-- insert, update, delete의 경우 resultType은 작성하지 않는다. 기본 _int로 수행 결과를 리턴한다. -->
	<!-- 파라미터로 전달된 dto의 필드 이름으로 값을 바인딩 해 주어야 한다. getter를 이용하며 getter가 없는 경우도 
		에러가 발생한다. -->
	<!-- 파라미터 타입도 생략이 가능하다. -->


	<insert id="insertMenu"
		parameterType="com.uni.model.dto.FoodDTO">
		INSERT
		INTO MASTERFOODTABLE A
		(
		A.FOOD_ID ,
		A.FOOD_NAME ,
		A.RCP_PAT ,
		A.INFO_ENG ,
		A.INFO_NA ,
		A.INFO_CAR ,
		A.INFO_PRO ,
		A.INFO_FAT ,
		A.MANUAL01 ,
		A.MANUAL02 ,
		A.MANUAL03 ,
		A.MANUAL04 ,
		A.MANUAL05 ,
		A.MANUAL06 ,
		A.BAN_YN

		)
		VALUES
		(
		SEQ_FOOD_ID.NEXTVAL

		, #{ foodName }
		, #{
		rcpPat }
		, #{ infoEng }
		, #{ infoNa }
		, #{ infoCar }
		, #{ infoPro }
		, #{
		infoFat }
		, #{ manual01 }
		, #{ manual02 }
		, #{ manual03 }
		, #{ manual04 }
		, #{ manual05 }
		, #{ manual06 }
		, #{ banYN }
		)
	</insert>

	<update id="updateFood"
		parameterType="com.uni.model.dto.FoodDTO">
		UPDATE
		MASTERFOODTABLE A
		SET
		A.FOOD_NAME = #{foodName},
		A.RCP_PAT = #{rcpPat},
		A.INFO_ENG = #{infoEng},
		A.INFO_NA = #{infoNa},
		A.INFO_CAR = #{infoCar},
		A.INFO_PRO = #{infoPro},
		A.INFO_FAT =
		#{infoFat},
		A.MANUAL01 = #{manual01},
		A.MANUAL02 = #{manual02},
		A.MANUAL03 = #{manual03},
		A.MANUAL04 = #{manual04},
		A.MANUAL05 =
		#{manual05},
		A.MANUAL06 = #{manual06},
		A.BAN_YN = #{banYN}
		WHERE
		A.FOOD_ID = #{ foodId }
	</update>

	<delete id="deleteFood" parameterType="_int">
		DELETE
		FROM MASTERFOODTABLE
		A
		WHERE A.FOOD_ID = #{ foodId }
	</delete>


	<select id="banFood" parameterType="string"
		resultMap="foodResultMap">
		SELECT
		A.FOOD_ID ,
		A.FOOD_NAME ,
		A.RCP_PAT ,
		A.INFO_ENG ,
		A.INFO_NA ,
		A.INFO_CAR ,
		A.INFO_PRO ,
		A.INFO_FAT ,
		A.MANUAL01 ,
		A.MANUAL02
		,
		A.MANUAL03 ,
		A.MANUAL04 ,
		A.MANUAL05 ,
		A.MANUAL06 ,
		A.BAN_YN
		FROM
		MASTERFOODTABLE A
		WHERE A.BAN_YN = 'Y'
		AND A.FOOD_NAME LIKE '%'||
		#{foodName}||'%'
		ORDER BY A.FOOD_NAME
	</select>

	<select id="banFoodAll" parameterType="string"
		resultMap="foodResultMap">
		SELECT
		A.FOOD_ID ,
		A.FOOD_NAME ,
		A.RCP_PAT ,
		A.INFO_ENG ,
		A.INFO_NA ,
		A.INFO_CAR ,
		A.INFO_PRO ,
		A.INFO_FAT ,
		A.MANUAL01 ,
		A.MANUAL02
		,
		A.MANUAL03 ,
		A.MANUAL04 ,
		A.MANUAL05 ,
		A.MANUAL06 ,
		A.BAN_YN
		FROM
		MASTERFOODTABLE A
		WHERE A.BAN_YN = 'Y'
		ORDER BY A.FOOD_NAME
	</select>

	<update id="updateBanFood"
		parameterType="com.uni.model.dto.FoodDTO">
		UPDATE
		MASTERFOODTABLE A
		SET
		A.BAN_YN = #{banYN}
		WHERE
		A.FOOD_ID = #{ foodId }

	</update>




</mapper>
